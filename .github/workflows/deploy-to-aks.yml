name: Deploy to AKS

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "testing"
      namespace:
        description: "Kubernetes namespace"
        required: true
        default: "sit722"

env:
  # Adjust if your RG/AKS names differ
  RG: rg-sit722
  AKS: aks-sit722

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RG }}
          cluster-name: ${{ env.AKS }}

      - name: Set env (namespace)
        run: echo "NAMESPACE=${{ github.event.inputs.namespace }}" >> "$GITHUB_ENV"

      - name: Apply ALL manifests (idempotent)
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/secrets.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/configmaps.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/rabbitmq.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/customer-db.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/product-db.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/order-db.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/customer-service.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/product-service.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/order-service.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/nginx-config.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/frontend.yaml

      - name: Wait for deployments to be Ready
        run: |
          set -e
          DEPLOYS=("frontend" "customer-service" "product-service" "order-service" "customer-db-deployment" "order-db" "product-db" "rabbitmq")
          for d in "${DEPLOYS[@]}"; do
            echo "Waiting for deployment/$d rollout..."
            kubectl -n "$NAMESPACE" rollout status deployment/"$d" --timeout=300s
          done

      - name: Wait for LoadBalancer EXTERNAL-IPs
        run: |
          set -e
          SVCS=("frontend" "customer-service" "product-service" "order-service")
          for s in "${SVCS[@]}"; do
            echo "Waiting for EXTERNAL-IP on service/$s ..."
            for i in {1..40}; do
              IP=$(kubectl -n "$NAMESPACE" get svc "$s" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              HOST=$(kubectl -n "$NAMESPACE" get svc "$s" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              if [ -n "$IP" ] || [ -n "$HOST" ]; then
                echo "::notice title=$s EXTERNAL-IP::${IP:-$HOST}"
                break
              fi
              sleep 15 
            done
          done

      - name: Show services (IPs)
        run: kubectl get svc -n "$NAMESPACE" -o wide
