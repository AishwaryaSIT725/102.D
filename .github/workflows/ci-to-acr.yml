name: CI (testing) - Test, Build, Push to ACR

on:
  push:
    branches: ["testing"]

env:
  # e.g. "sit722acr.azurecr.io" from repo secret
  ACR: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    strategy:
      fail-fast: false
      matrix:
        include:
          - path: backend/customer_service
            db: customers
          - path: backend/order_service
            db: orders
          - path: backend/product_service
            db: products
          - path: frontend
            db: ""

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        if: startsWith(matrix.path, 'backend/')
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Postgres client & create DBs
        if: startsWith(matrix.path, 'backend/')
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          for DB in customers orders products; do
            PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE DATABASE ${DB};" || true
          done

      - name: Install deps & run tests (backend)
        if: startsWith(matrix.path, 'backend/')
        working-directory: ${{ matrix.path }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ matrix.db }}
          PYTHONUNBUFFERED: "1"
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install httpx pytest
          if [ -f tests/test_main.py ]; then
            pytest -q
          else
            echo "No tests found, skipping."
          fi

      - name: Frontend quick check
        if: matrix.path == 'frontend'
        run: echo "No tests for frontend; continuing."

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    env:
      # make ACR available to all steps explicitly
      ACR: ${{ secrets.ACR_LOGIN_SERVER }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - path: backend/customer_service
            image: customer_service
          - path: backend/order_service
            image: order_service
          - path: backend/product_service
            image: product_service
          - path: frontend
            image: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare & login to ACR
        shell: bash
        run: |
          set -euo pipefail

          if [[ -z "${ACR:-}" ]]; then
            echo "::error::ACR secret (ACR_LOGIN_SERVER) is empty. Set it to something like 'sit722acr.azurecr.io'."
            exit 1
          fi

          # Convert "sit722acr.azurecr.io" -> "sit722acr"
          ACR_NAME="${ACR%%.*}"
          echo "ACR login server: ${ACR}"
          echo "Resolved ACR name:  ${ACR_NAME}"

          echo "Checking ACR existence and access..."
          az acr show -n "${ACR_NAME}" --query "name" -o tsv

          echo "Logging into ACR..."
          az acr login --name "${ACR_NAME}"

      - name: Verify build context
        shell: bash
        run: |
          set -euo pipefail
          echo "Listing contents of ${{ matrix.path }}:"
          ls -la "${{ matrix.path }}"
          if [[ ! -f "${{ matrix.path }}/Dockerfile" ]]; then
            echo "::error::No Dockerfile at '${{ matrix.path }}/Dockerfile'."
            exit 1
          fi

      - name: Build & Push ${{ matrix.image }}
        shell: bash
        run: |
          set -euo pipefail

          IMAGE="${ACR}/${{ matrix.image }}"
          TAG_SHA="testing-${{ github.sha }}"
          TAG_LATEST="testing-latest"

          echo "Building image: ${IMAGE}"
          docker build \
            -f "${{ matrix.path }}/Dockerfile" \
            -t "${IMAGE}:${TAG_SHA}" \
            -t "${IMAGE}:${TAG_LATEST}" \
            "${{ matrix.path }}"

          echo "Pushing tags to ${IMAGE}"
          docker push "${IMAGE}:${TAG_SHA}"
          docker push "${IMAGE}:${TAG_LATEST}"

          echo " Finished ${{ matrix.image }}"
