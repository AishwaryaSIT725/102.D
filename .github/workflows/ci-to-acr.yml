name: CI (testing) - Test, Build, Push to ACR

on:
  push:
    branches: ["testing"]

env:
  # ACR login server from repo secrets, e.g. "sit722acr.azurecr.io"
  ACR: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test:
    runs-on: ubuntu-latest

    # Start PostgreSQL for tests
    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # wait until Postgres is healthy
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    strategy:
      fail-fast: false
      matrix:
        include:
          - path: backend/customer_service
            db: customers
          - path: backend/order_service
            db: orders
          - path: backend/product_service
            db: products
          - path: frontend               # no DB, we just skip tests below
            db: ""

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        if: startsWith(matrix.path, 'backend/')
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Postgres client (psql) & create DBs
        if: startsWith(matrix.path, 'backend/')
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          # Create the three DBs once; ignore "already exists" errors
          for DB in customers orders products; do
            PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE DATABASE ${DB};" || true
          done

      - name: Install deps & run tests (backend)
        if: startsWith(matrix.path, 'backend/')
        working-directory: ${{ matrix.path }}
        env:
          # point each service at its own DB
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ matrix.db }}
          # make FastAPI testclient happy where needed
          PYTHONUNBUFFERED: "1"
        run: |
          python -m pip install -U pip
          # Your requirements already include fastapi/sqlalchemy/etc;
          # add httpx/pytest for testclient
          pip install -r requirements.txt
          pip install httpx pytest
          # run tests quietly; if a service has no tests, skip gracefully
          if [ -f tests/test_main.py ]; then
            pytest -q
          else
            echo "No tests found, skipping."
          fi

      - name: Frontend quick check
        if: matrix.path == 'frontend'
        run: echo "No tests for frontend; continuing."

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - path: backend/customer_service
            image: customer_service
          - path: backend/order_service
            image: order_service
          - path: backend/product_service
            image: product_service
          - path: frontend
            image: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: az acr login
        run: az acr login --name "${{ env.ACR%%.* }}"

      - name: Build & Push ${{ matrix.image }}
        run: |
          IMAGE="${{ env.ACR }}/${{ matrix.image }}"
          TAG_SHA="testing-${{ github.sha }}"
          TAG_LATEST="testing-latest"
          docker build -t "$IMAGE:$TAG_SHA" -t "$IMAGE:$TAG_LATEST" "${{ matrix.path }}"
          docker push "$IMAGE:$TAG_SHA"
          docker push "$IMAGE:$TAG_LATEST"
