name: CI (testing) - Test, Build, Push to ACR

on:
  push:
    branches: [ "testing" ]

env:
  # Example: sit722acr.azurecr.io (set in repo secrets)
  ACR: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test:
    runs-on: ubuntu-latest

    # Spin up Postgres inside the job
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    strategy:
      fail-fast: false
      matrix:
        include:
          - service: backend/customer_service
            dbname: customer_db
          - service: backend/order_service
            dbname: order_db
          - service: backend/product_service
            dbname: product_db
          - service: frontend

    steps:
      - uses: actions/checkout@v4

      # Install psql client + create the DB for this matrix entry
      - name: Prepare test database
        if: startsWith(matrix.service, 'backend/')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          # Wait until Postgres accepts connections
          for i in {1..30}; do
            if PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "select 1" >/dev/null 2>&1; then break; fi
            echo "Waiting for Postgres..."
            sleep 2
          done
          # Create a DB for this service (idempotent)
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='${{ matrix.dbname }}'" | grep -q 1 || \
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE DATABASE \"${{ matrix.dbname }}\";"

      # Python tests for backend services (skip for frontend)
      - name: Setup Python
        if: startsWith(matrix.service, 'backend/')
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps & run tests
        if: startsWith(matrix.service, 'backend/')
        working-directory: ${{ matrix.service }}
        env:
          # point SQLAlchemy to the DB we just created
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ matrix.dbname }}
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Test dependencies required by FastAPI/Starlette TestClient
          pip install pytest httpx
          # Run tests only if a tests directory exists
          if [ -d tests ]; then python -m pytest -q; else echo "No tests found, skipping"; fi

      - name: Frontend quick check
        if: matrix.service == 'frontend'
        run: echo "No tests for frontend; continuing."

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - path: backend/customer_service
            image: customer_service
          - path: backend/order_service
            image: order_service
          - path: backend/product_service
            image: product_service
          - path: frontend
            image: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to ACR using AAD (derive registry name from login server in shell)
      - name: az acr login
        run: |
          ACR_NAME="$(echo "${{ env.ACR }}" | cut -d'.' -f1)"   # sit722acr.azurecr.io -> sit722acr
          az acr login --name "$ACR_NAME"

      - name: Build & Push ${{ matrix.image }}
        run: |
          IMAGE="${{ env.ACR }}/${{ matrix.image }}"
          TAG_SHA="testing-${{ github.sha }}"
          TAG_LATEST="testing-latest"
          docker build -t "$IMAGE:$TAG_SHA" -t "$IMAGE:$TAG_LATEST" "${{ matrix.path }}"
          docker push "$IMAGE:$TAG_SHA"
          docker push "$IMAGE:$TAG_LATEST"
