name: CI (testing) - Test, Build, Push to ACR

on:
  push:
    branches: ["testing"]

env:
  # ACR login server (must be set in repo secrets, e.g. sit722acr.azurecr.io)
  ACR: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - backend/customer_service
          - backend/order_service
          - backend/product_service
          - frontend
    steps:
      - uses: actions/checkout@v4

      # Python tests for backend services (skip for frontend)
      - name: Setup Python
        if: startsWith(matrix.service, 'backend/')
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps & run tests
        if: startsWith(matrix.service, 'backend/')
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install -U pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f tests/test_main.py ]; then pytest -q --disable-warnings; else echo "No tests found, skipping"; fi

      - name: Frontend quick check
        if: matrix.service == 'frontend'
        run: echo "No tests for frontend; continuing."

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - path: backend/customer_service
            image: customer_service
          - path: backend/order_service
            image: order_service
          - path: backend/product_service
            image: product_service
          - path: frontend
            image: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify ACR access & tooling
        shell: bash
        env:
          ACR: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          set -euo pipefail

          echo "ACR (from secret): ${ACR:-<empty>}"
          if [[ -z "${ACR:-}" ]]; then
            echo "::error::ACR_LOGIN_SERVER secret is empty. Set repo secret ACR_LOGIN_SERVER to something like 'sit722acr.azurecr.io'."
            exit 1
          fi

          # Convert "sit722acr.azurecr.io" -> "sit722acr"
          ACR_NAME="${ACR%%.*}"
          echo "Resolved ACR_NAME: $ACR_NAME"

          echo "Checking ACR visibility with az acr show..."
          az acr show -n "$ACR_NAME" --query name -o tsv

          echo "Logging into ACR..."
          az acr login -n "$ACR_NAME"

          echo "Docker info:"
          docker info >/dev/null 2>&1 || { echo "::error::Docker is not available"; exit 1; }

          echo "List build context for ${{ matrix.path }}:"
          ls -la "${{ matrix.path }}"

          if [[ ! -f "${{ matrix.path }}/Dockerfile" ]]; then
            echo "::error::No Dockerfile found at ${{ matrix.path }}/Dockerfile"
            exit 1
          fi

      - name: Build & Push ${{ matrix.image }}
        shell: bash
        env:
          ACR: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          set -euo pipefail
          ACR_NAME="${ACR%%.*}"

          IMAGE="${ACR}/${{ matrix.image }}"
          TAG_SHA="testing-${{ github.sha }}"
          TAG_LATEST="testing-latest"

          echo "Building image: $IMAGE"
          docker build \
            -f "${{ matrix.path }}/Dockerfile" \
            -t "$IMAGE:$TAG_SHA" \
            -t "$IMAGE:$TAG_LATEST" \
            "${{ matrix.path }}"

          echo "Pushing $IMAGE:$TAG_SHA"
          docker push "$IMAGE:$TAG_SHA"

          echo "Pushing $IMAGE:$TAG_LATEST"
          docker push "$IMAGE:$TAG_LATEST"

          echo "Done building and pushing $IMAGE"
