name: CI (testing) - Test, Build, Push to ACR

on:
  push:
    branches: ["testing"]

# Required repo secrets:
#   - AZURE_CREDENTIALS  (full --sdk-auth JSON)
#   - ACR_LOGIN_SERVER   (e.g. sit722acr.azurecr.io)
env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  # --------------------------- TESTS ---------------------------
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    strategy:
      fail-fast: false
      matrix:
        include:
          - path: backend/customer_service
            db: customers
          - path: backend/order_service
            db: orders
          - path: backend/product_service
            db: products
          - path: frontend
            db: ""

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        if: startsWith(matrix.path, 'backend/')
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Postgres client & create DBs
        if: startsWith(matrix.path, 'backend/')
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          for DB in customers orders products; do
            PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE DATABASE ${DB};" || true
          done

      - name: Install deps & run tests (backend)
        if: startsWith(matrix.path, 'backend/')
        working-directory: ${{ matrix.path }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ matrix.db }}
          PYTHONUNBUFFERED: "1"
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install httpx pytest
          if [ -f tests/test_main.py ]; then
            pytest -q
          else
            echo "No tests found, skipping."
          fi

      - name: Frontend quick check
        if: matrix.path == 'frontend'
        run: echo "No tests for frontend; continuing."

  # ----------------------- BUILD & PUSH ------------------------
  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - path: backend/customer_service
            image: customer_service
          - path: backend/order_service
            image: order_service
          - path: backend/product_service
            image: product_service
          - path: frontend
            image: frontend

    steps:
      - uses: actions/checkout@v4

      # Login to Azure with your SP JSON
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set subscription, verify registry visibility, and login to ACR
      - name: Prepare & login to ACR
        shell: bash
        env:
          AZ_CREDS: ${{ secrets.AZURE_CREDENTIALS }}
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          set -euo pipefail

          # Set the subscription from the secret to avoid cross-subscription issues
          SUBSCRIPTION_ID=$(echo "$AZ_CREDS" | jq -r '.subscriptionId')
          az account set --subscription "$SUBSCRIPTION_ID"

          echo "Active subscription:"
          az account show --query "{name:name, id:id}" -o table

          # Derive registry name from login server (e.g. sit722acr.azurecr.io -> sit722acr)
          ACR_NAME="${ACR_LOGIN_SERVER%%.*}"
          echo "ACR name: $ACR_NAME"

          echo "Registries visible to this SP:"
          az acr list --query "[].{name:name, rg:resourceGroup, login:loginServer}" -o table || true

          # This requires the SP to have **Reader** on the registry.
          az acr show -n "$ACR_NAME" -o table

          # Login (requires AcrPush on the registry)
          az acr login --name "$ACR_NAME"

      - name: Verify build context
        run: ls -la "${{ matrix.path }}"

      - name: Build & Push ${{ matrix.image }}
        shell: bash
        env:
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          set -euo pipefail
          IMAGE="${ACR_LOGIN_SERVER}/${{ matrix.image }}"
          TAG_SHA="testing-${{ github.sha }}"
          TAG_LATEST="testing-latest"

          docker build -t "$IMAGE:$TAG_SHA" -t "$IMAGE:$TAG_LATEST" "${{ matrix.path }}"
          docker push "$IMAGE:$TAG_SHA"
          docker push "$IMAGE:$TAG_LATEST"
